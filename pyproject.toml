[tool.poetry]
name = "live_chat"
version = "0.1.0"
description = ""
authors = [

]
maintainers = [

]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.115.4"
fastapi-pagination = "^0.12.32"
logfire = { version = "^2.7.1", extras = ["fastapi", "sqlalchemy"] }
sqlakeyset = "^2.0.1726021475"
faststream = "^0.5.28"
sse-starlette = "^2.1.3"
aiofiles = "^24.1.0"
pillow = "^11.0.0"
boto3 = "^1.35.60"
types-aiofiles = "^24.1.0.20240626"
uvicorn = { version = "^0.32.0", extras = ["standard"] }
fastapi-users = "^14.0.0"
httpx-oauth = "^0.14.1"
fastapi-users-db-sqlalchemy = "^6.0.1"
pydantic = "^2"
pydantic-settings = "^2"
yarl = "^1"
ujson = "^5.10.0"
SQLAlchemy = {version = "^2.0.31", extras = ["asyncio"]}
alembic = "^1.13.2"
asyncpg = {version = "^0.29.0", extras = ["sa"]}
redis = {version = "^5.0.7", extras = ["hiredis"]}
httptools = "^0.6.1"
aio-pika = "^9.4.1"
coverage = "^7.6.5"
faker = "^33.0.0"
factory-boy = "^3.3.1"
pytest-factoryboy = "^2.7.0"
pytest-asyncio = "^0.24.0"
pytest-mock = "^3.14.0"
sqladmin = {extras = ["full"], version = "^0.20.1"}
itsdangerous = "^2.2.0"
transformers = "^4.48.2"
torch = "^2.6.0"
lingua-language-detector = "^2.0.2"
langchain = "^0.3.14"
langchain-huggingface = "^0.1.2"
accelerate = "^0.26.0"
sentencepiece = "^0.2.0"
runorm = "^1.1"


[tool.poetry.group.dev.dependencies]
pytest = "^8"
ruff = "^0.5.0"
mypy = "^1.10.1"
pre-commit = "^3.7.1"
black = "^24.4.2"
pytest-cov = "^5"
anyio = "^4"
pytest-env = "^1.1.3"
fakeredis = "^2.23.3"
httpx = "^0.27.0"
sqladmin = {extras = ["full"], version = "^0.20.1"}
fastapi-users = "^14.0.0"
types-requests = "^2.32.0.20241016"

[tool.isort]
profile = "black"
multi_line_output = 3
src_paths = ["live_chat",]

# ==== Coverage ====
[tool.coverage.run]
include = ["live_chat/**"]
omit = ["*/migrations/*", "*/tests/*", "*/settings/*"]

[tool.mypy]
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
allow_untyped_calls = true
pretty = true
show_error_codes = true
implicit_reexport = true
allow_untyped_decorators = true
warn_unused_ignores = false
warn_return_any = false
namespace_packages = true

# Remove this and add `types-redis`
# when the issue https://github.com/python/typeshed/issues/8242 is resolved.
[[tool.mypy.overrides]]
module = [
    'redis.asyncio'
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["*.migrations.*"]
ignore_errors = true

[tool.pytest.ini_options]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
]

[tool.ruff]
# List of enabled rulsets.
# See https://docs.astral.sh/ruff/rules/ for more information.
lint.select = [
    "E",   # Error
    "F",   # Pyflakes
    "W",   # Pycodestyle
    "C90", # McCabe complexity
    "I",   # Isort
    "N",   # pep8-naming
    "D",   # Pydocstyle
    "ANN", # Pytype annotations
    "S",   # Bandit
    "B",   # Bugbear
    "COM", # Commas
    "C4",  # Comprehensions
    "ISC", # Implicit string concat
    "PIE", # Unnecessary code
    "T20", # Catch prints
    "PYI", # validate pyi files
    "Q",   # Checks for quotes
    "RSE", # Checks raise statements
    "RET", # Checks return statements
    "SLF", # Self checks
    "SIM", # Simplificator
    "PTH", # Pathlib checks
    "ERA", # Checks for commented out code
    "PL",  # PyLint checks
    "RUF", # Specific to Ruff checks
]
lint.ignore = [
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "B008",    # Do not perform function calls in argument defaults
    "D211",    # No blank lines allowed before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "D401",    # First line should be in imperative mood
    "D104",    # Missing docstring in public package
    "D100",    # Missing docstring in public module
    "D202",    # No blank lines allowed after function docstring
    "ANN102",  # Missing type annotation for self in method
    "ANN101",  # Missing type annotation for argument
    "ANN401",  # typing.Any are disallowed in `**kwargs
    "PLR0913", # Too many arguments for function call
    "D106",    # Missing docstring in public nested class
    "RUF001",  # String contains ambiguous
]
exclude = [
    "live_chat/db/migrations",
    ".venv/"
]
lint.mccabe = { max-complexity = 10 }
line-length = 88

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # Use of assert detected
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["int", "str", "float", "bytes"]


[fastapi-template.options]
project_name = "live_chat"
api_type = "rest"
enable_redis = "True"
enable_rmq = "False"
ci_type = "gitlab_ci"
enable_migrations = "True"
enable_taskiq = "None"
enable_kube = "None"
kube_name = "live-chat"
enable_routers = "True"
enable_kafka = "None"
enable_loguru = "None"
traefik_labels = "None"
add_dummy = "None"
orm = "sqlalchemy"
self_hosted_swagger = "None"
prometheus_enabled = "None"
sentry_enabled = "None"
otlp_enabled = "None"
gunicorn = "None"
add_users = "True"
cookie_auth = "None"
jwt_auth = "True"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
